meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_al2_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
          - name: emr-launcher-release
          - name: terraform-bootstrap
          - name: al2-emr-ami
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_al2_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
          - name: emr-launcher-release
          - name: terraform-bootstrap
          - name: al2-emr-ami
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terminate-replica:
      task: terminate-hbase-replica
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: UNSET
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          dir: emr-check
          args:
            - -ec
            - |
              source /assume-role

              function cluster_status {
                local cluster_id=$1
                aws --output json --region="$AWS_REGION" \
                  emr describe-cluster --cluster-id $cluster_id | jq -r '.Cluster.Status.State'
              }

              cluster_id=$(aws --output json --region="$AWS_REGION" \
                               emr list-clusters --active --query "Clusters[?Name=='hbase-read-replica'].[Id][0][0]" | \
                           tr -d '"')

              if [[ $cluster_id != "null" ]]; then
                # Terminate using AWS CLI because targetted destroys can cause
                # issues with TF (orphaned resources, etc.)
                aws --region="$AWS_REGION" emr terminate-clusters --cluster-ids $cluster_id

                i=0
                while [[ $i -le 360 ]]; do
                  status=$(cluster_status $cluster_id)
                  if [ "$status" == "TERMINATED" ]; then
                    echo status: \'$status\', cluster terminated exiting normally.
                    exit 0
                  fi

                  if [ "$status" == "TERMINATED_WITH_ERRORS" ]; then
                    echo status: \'$status\', cluster terminated with errors exiting normally.
                    exit 0
                  fi

                  i=$((i+1))
                  echo status: \'$status\', sleeping for 10 seconds.
                  sleep 10
                done

                echo Monitoring of the destruction has timed out.
              else
                echo No cluster exists, nothing to terminate.
              fi

    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/python3-pyspark-pytest
        run:
          path: sh
          dir: dataworks-aws-ingest-replica
          args:
            - -exc
            - |
              unset http_proxy
              unset https_proxy
              pytest -vs files/steps/tests.py
        inputs:
          - name: dataworks-aws-ingest-replica
        params:
          SPARK_LOCAL_HOSTNAME: localhost

    linting-shell:
      task: linting-shell
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: koalaman/shellcheck-alpine
            tag: latest
        run:
          path: sh
          args:
            - -exc
            - |
              find . -name "*.sh" | cat >> shell-list
              for i in $(cat shell-list); do shellcheck $i -e SC2154 -e SC1091; done
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
