meta:
  plan:
    terraform-common-config:
      image: terraform-ecr
      config:
        platform: linux
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_al2_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
          - name: emr-launcher-release
          - name: terraform-bootstrap
          - name: al2-emr-ami
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_al2_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica
          - name: emr-launcher-release
          - name: terraform-bootstrap
          - name: al2-emr-ami
      params:
        DETAILED_EXITCODE: -detailed-exitcode
    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/python3-pyspark-pytest
        run:
          path: sh
          dir: dataworks-aws-ingest-replica
          args:
            - -exc
            - |
              unset http_proxy
              unset https_proxy
              pytest -vs files/steps/tests.py
              pytest -vs files/metadata_removal_lambda/tests.py
        inputs:
          - name: dataworks-aws-ingest-replica
        params:
          SPARK_LOCAL_HOSTNAME: localhost

    linting-shell:
      task: linting-shell
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: koalaman/shellcheck-alpine
            tag: latest
        run:
          path: sh
          args:
            - -exc
            - |
              find . -name "*.sh" | cat >> shell-list
              for i in $(cat shell-list); do shellcheck $i -e SC2154 -e SC1091; done
          dir: dataworks-aws-ingest-replica
        inputs:
          - name: dataworks-aws-ingest-replica

    e2e-tests:
      task: e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          NUMBER_OF_TOPICS_TO_USE: "3"
          E2E_TEST_TIMEOUT: 300
          E2E_FEATURE_TAG_FILTER: "@ingest-replica"
          ASSUME_DURATION: 3600
        run:
          path: sh
          dir: dataworks-behavioural-framework
          args:
            - -exc
            - |
              source /assume-role

              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: dataworks-aws-ingest-replica
          - name: meta
